; [default]
; bootstrap.servers=localhost:46831

; [consumer-port]
; bootstrap.servers=localhost:46831

; [consumer]
; group.id=repos_consumer_group

; [consumer-stats]
; group.id=stats_consumer_group

; ; # 'auto.offset.reset=earliest' to start reading from the beginning of
; ; # the topic if no committed offsets exist.
; auto.offset.reset=earliest

; ; Default
; ; enable.auto.commit=true
; ; auto.commit.interval.ms=1000


; Configuration for both producer and consumer
[default_producer]
; bootstrap.servers = kafka:9092
bootstrap.servers = kafka:32967

[default_consumer]
; bootstrap.servers = kakfa:9092
bootstrap.servers = kafka:32967
auto.offset.reset = earliest
; group.id=default_consumer_group_id

; Further configuration of consumers
[raw_events_to_repos_consumer]
group.id = raw_events_to_repos_consumer_group

[raw_events_to_stats_consumer]
group.id = raw_events_to_stats_consumer_group

[repos_consumer]
group.id = repos_consumer_group

[stats_consumer]
group.id = stats_consumer_group

[near_real_time_stars_forks_consumer]
group.id = near_real_time_stars_forks_consumer_group

[near_real_time_stars_forks_consumer_2]
group.id = near_real_time_stars_forks_consumer_group_2

; Used by the python flask app
; Path: /home/xeon/Thesis/flask-material-dashboard/run_with_socketio.py
[num_of_raw_events_consumer]
group.id = num_of_raw_events_consumer_group

[num_of_raw_events_consumer_4]
group.id = num_of_raw_events_consumer_group_4


; Used by the pyflink job counting the raw events per second
; Path: /home/xeon/Thesis/local-kafka-flink-cassandra-integration/presentation-10-demo/task-2-store-tables-repos-and-stats/create_raw_events_per_sec_datastream.py
[raw_events_to_num_of_events_per_sec_consumer]
group.id = raw_events_to_num_of_events_per_sec_consumer_group

; Used by the pyflink job counting the total number of statistics per day (creates D1_2_3)
[raw_events_to_stats_by_day_consumer]
group.id = raw_events_to_stats_by_day_consumer_group

; Used by the pyflink job counting the total number of language occurences 
; to infer its popularity(creates D4)
[raw_events_to_language_popularity_by_day_consumer]
group.id = raw_events_to_language_popularity_by_day_consumer_group

; Used by the pyflink job counting the total number of topic occurences 
; to infer its popularity(creates D4)
[raw_events_to_topic_popularity_by_day_consumer]
group.id = raw_events_to_topic_popularity_by_day_consumer_group



; Consumer of topic "stats_by_day":
; near-real-time-stats-and-popularity-insights-consumer.py
; Stores data into T1_2 and T3
[store_stats_by_day_to_cassandra_consumer]
group.id = store_stats_by_day_to_cassandra_consumer_group

; Consumer of topic "popular_language_by_day":
; near-real-time-stats-and-popularity-insights-consumer.py
; Stores data into T4
[store_popular_languages_by_day_to_cassandra_consumer]
group.id = store_popular_languages_by_day_to_cassandra_consumer_group


; Consumer of topic "popular_topics_by_day":
; near-real-time-stats-and-popularity-insights-consumer.py
; Stores data into T5
[store_popular_topics_by_day_to_cassandra_consumer]
group.id = store_popular_topics_by_day_to_cassandra_consumer_group



; Used by the pyflink job for the bots 
; (/home/xeon/Thesis/local-kafka-flink-cassandra-integration/presentation-10-demo/task-2-store-tables-repos-and-stats/near-real-time-bots-vs-humans-via-flink.py)
; to infer the bots popularity and usage


; Q4, Q5 (languages and topics are added later in Cassandra)
[number_of_events_by_repo_and_day_type_info_info_consumer]
group.id = number_of_events_by_repo_and_day_type_info_info_consumer_group


; Q4, Q5 (languages and topics - newer schema)
[day_language_events_type_info_consumer]
group.id = day_language_events_type_info_consumer_group



; Q6_h
[raw_events_to_top_human_contributors_info_consumer]
group.id = raw_events_to_top_human_contributors_info_consumer_group

; Q6_b: 
[raw_events_to_top_bot_contributors_info_consumer]
group.id = raw_events_to_top_bot_contributors_info_consumer_group

; Q7_h: 
[raw_events_to_number_of_pull_requests_by_humans_consumer]
group.id = raw_events_to_number_of_pull_requests_by_humans_consumer_group

; Q7_b: 
[raw_events_to_number_of_pull_requests_by_bots_consumer]
group.id = raw_events_to_number_of_pull_requests_by_bots_consumer_group

; Q8_h: 
[raw_events_to_number_of_human_events_per_type_by_month_consumer]
group.id = raw_events_to_number_of_human_events_per_type_by_month_consumer_group

; Q8_b:
[raw_events_to_number_of_bot_events_per_type_by_month_consumer]
group.id = raw_events_to_number_of_bot_events_per_type_by_month_consumer_group

; Q9
[raw_events_to_stars_per_month_on_js_repo_info_consumer]
group.id = raw_events_to_stars_per_month_on_js_repo_info_consumer_group

; Q10
[top_contributors_of_js_repo_info_consumer]
group.id = top_contributors_of_js_repo_info_consumer_group

; Q11_12
[raw_events_to_pull_request_closing_times_info_consumer]
group.id = raw_events_to_pull_request_closing_times_info_consumer_group

; Q13_14
[raw_events_to_issue_closing_times_info_consumer]
group.id = raw_events_to_issue_closing_times_info_consumer_group

; Q15
[raw_events_to_issue_closing_times_by_label_info_consumer]
group.id = raw_events_to_issue_closing_times_by_label_info_consumer_group


; Q6-8: Second screen 
[second_screen_consumer]
group.id = second_screen_consumer_group_id


; # 'auto.offset.reset=earliest' to start reading from the beginning of
; # the topic if no committed offsets exist.
; auto.offset.reset=earliest

; Default
; enable.auto.commit=true
; auto.commit.interval.ms=1000
